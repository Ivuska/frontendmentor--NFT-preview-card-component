/* table of contents

  1. global styles

  2. typography

  3. layout
   3.1 main layout settings
   3.2 main image
   3.3 content
   3.4 footer

  4. learning notes
    4.1 flexbox
    4.2 psudo-classes
    4.3 pseudo-elements
    4.4 best practice and notes (smth to padding, margin, img)
*/


/* =============
   global styles
   ============= */

html {
  box-sizing: border-box;
}

*, ::after, ::before {
  box-sizing: inherit;
}

body {
  margin: auto;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: hsl(217, 54%, 11%);
  font-family: "Outfit", sans-serif;
  color: hsl(215, 51%, 70%);
  font-weight: 300, 400, 600;
  line-height: 1.5;
  font-size: 18px;
}

/* =========
  typography
  ========== */

h1 a {
  color: hsl(0, 0%, 100%);
  font-size: 1.6rem;
  margin: 0.5rem 0;
  text-decoration: none;
}

h1:hover {
  color: hsl(178, 100%, 50%)
}

p {
  margin: 0;
}

/* ======
   layout
   ====== */

/* main layout settings */

.isResponsive {
  display: flex;
  flex-shrink: 1;
  margin: 0;
  padding: 0;
}

.card {
  background-color: hsl(216, 50%, 16%);
  border-radius: 1rem;
  max-width: 335px;
  padding: 1.5rem;
  box-shadow: 1rem 1.7rem 0.8rem hsl(217, 65%, 8%), -1rem 1.7rem 0.8rem hsl(217, 65%, 8%);
}

.cardContent {
  align-items: flex-start;
  flex-direction: column;
  font-size: 1.1rem;
}

/* main image */

.equilibriumImg {
  border-radius: 0.4rem;
  max-width: 100%;
  display: block;
}

.imgWrapper {
  position: relative;
  text-decoration: none;
}

.imgWrapper::after {
  border-radius: 0.2rem;
  content: "";
  background-color: hsla(178, 100%, 50%, 0.5);
  background-image: url("./images/icon-view.svg");
  background-repeat: no-repeat;
  background-position: center;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
  transition: opacity 100ms ease-in-out;
}

.imgWrapper:hover::after {
  opacity: 1;
  transition: opacity 100ms ease-in-out;
}

/* content */

.priceAndTime {
  justify-content: space-between;
  width: 100%;
  margin: 1rem 0;
}

.priceAndTime div {
  display: flex;
  align-items: center;
}

.priceAndTime img {
  margin-right: 0.3rem;
}

.ethereum {
  color: hsl(178, 100%, 50%);
}

.cardContent hr {
  width: 100%;
  border: none;
  border-top: 1px hsl(215, 32%, 27%) solid;
}

/* footer */

.footer {
  flex-direction: row;
  justify-content: flex-start;
  align-items: center;
  width: 100%;
  padding-top: 0.5rem;
  border-top: 1px hsl(215, 51%, 70%) solid;
}

.footer img {
  border-radius: 75%;
  width: 2rem;
  border: 1px hsl(0, 0%, 100%) solid;
  margin-right: 0.5rem;
}

.footer a {
  color: hsl(0, 0%, 100%);
  text-decoration: none;
}

.footer a:hover {
  color: hsl(178, 100%, 50%);
}


/* =================================
  Learning notes from this challenge
  ================================== */

/* ======= flexbox ======= */
/* It does not make much sense to apply flexbox to elements like img, h, p etc. */
/* Flexbox does not have margin collapse (so the margins of two flexbox items are added up). */
/* Flexbox is always used on the nearest child element not on the content of this 
     child element (if I set display: flex on a div, it controls positioning of elements inside 
     this div, but not content of those elements). */
/* https://www.youtube.com/watch?v=u044iM9xsWU */

/* ======= pseudo-classes ====== */
/* I can use pseudo-classes also on any CSS selector (p, .footer, div>h2.test,...). */
/* Do not hesitate to use HTML elements in selectors !! */

/* ======= pseudo-elements ======= */
/* Pseudo-element always needs property content (it can be empty string). */
/* I always need to use absolute position on the pseudo element and */
/* img is inline element so we need to display it block because it leads to baseline alignment
     of both images */
/* https://www.youtube.com/watch?v=zGiirUiWslI */

/* ====== best practice and notes ===== */
/* Never add 'width' and 'height' properties to the html element, set it in CSS. */
/* I can put svg elements in the img tag and use src="" for adding the svg to the layout. */
/* Padding is something like stuffing - it is better to set it on this whole section 
     element, because this automatically limit all the other children elements in this 
     element -> I can set width of all these children elements to 100% and they will never
     overflow. */
/* Padding is not collapsing, so it means that if two element have 10px padding it will 
     result in 20px padding together on the other hand margin has top and bottom collapsing 
     so if I set margin to 10px on one element and 5px to other element it leads to 10px space. */
/* Check contrast of the page with DevTools in Chrome. */
/* Transition works as simple animation. */